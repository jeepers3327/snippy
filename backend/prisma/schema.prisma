generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["selectRelationCount"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String       @id @default(uuid())
  name       String
  avatarUrl  String
  username   String       @unique
  password   String
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  comments   Comment[]
  gists      Gist[]
  stargazers Stargazers[]

  @@map("users")
}

model Gist {
  id          String       @id @default(uuid())
  description String
  isPrivate   Boolean?     @default(false)
  authorId    String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  author      User?        @relation(fields: [authorId], references: [id])
  comments    Comment[]
  files       GistFile[]
  stargazers  Stargazers[]

  @@map("gists")
}

model GistFile {
  id       String  @id @default(uuid())
  gistId   String?
  filename String
  snippet  String
  language String
  gist     Gist?   @relation(fields: [gistId], references: [id])

  @@map("gist_files")
}

model Comment {
  id        String   @id @default(uuid())
  comment   String
  userId    String?
  gistId    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  gist      Gist?    @relation(fields: [gistId], references: [id])
  user      User?    @relation(fields: [userId], references: [id])

  @@map("comments")
}

model Stargazers {
  user   User   @relation(fields: [userId], references: [id])
  userId String
  gist   Gist   @relation(fields: [gistId], references: [id])
  gistId String

  @@id([userId, gistId])
  @@map("stargazers")
}

model GistSearch {
  id            String   @unique
  description   String
  avatarUrl     String
  username      String
  files         Json[]
  commentCounts Int      @map("comment_counts")
  createdAt     DateTime

  @@map("gist_search")
}
